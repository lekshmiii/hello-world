{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf500
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fnil\fcharset0 Menlo-Regular;\f2\fswiss\fcharset0 Arial-BoldMT;
}
{\colortbl;\red255\green255\blue255;\red27\green29\blue31;\red255\green255\blue255;\red235\green236\blue237;
}
{\*\expandedcolortbl;;\cssrgb\c14118\c15294\c16078;\cssrgb\c100000\c100000\c100000;\cssrgb\c93725\c94118\c94510;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
One approach would be to make use of 
\f1\fs26 \cb4 ls
\f0\fs30 \cb3  to give us a list of the files, but we want this list to be guaranteed to show only 1 file or directory per line. The 
\f1\fs26 \cb4 -1
\f0\fs30 \cb3  switch will do this for us.\cb1 \

\f1\fs26 \cb4 $ ls -1\
dir1\
dir2\
dir3\
fileA\
fileB\
fileC\
\pard\pardeftab720\partightenfactor0

\f2\b\fs34 \cf2 \cb3 Example\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b0\fs30 \cf2 \cb3 Create the above sample data in an empty directory.\cb1 \

\f1\fs26 \cb4 $ mkdir dir\{1..3\}\
$ touch file\{A..C\}\

\f0\fs30 \cb3 Check it:\cb1 \

\f1\fs26 \cb4 $ ls\
dir1  dir2  dir3  fileA  fileB  fileC\

\f0\fs30 \cb3 Now to count you can use 
\f1\fs26 \cb4 wc -l
\f0\fs30 \cb3  to count the number of lines, which correspond to a file or directory in the 
\f1\fs26 \cb4 ls -1
\f0\fs30 \cb3  output.\cb1 \

\f1\fs26 \cb4 $ ls -1 | wc -l\
6\

\f0\fs30 \cb3 (note however that it doesn't include the hidden files)\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\b\fs34 \cf2 \cb3 Counting files or directories, just not together\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b0\fs30 \cf2 \cb3 To count either files or directories you need to change your tactic slightly. In this case I'd use 
\f1\fs26 \cb4 ls -l
\f0\fs30 \cb3  since it shows what's a directory and what's a a file.\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\b\fs34 \cf2 \cb3 Example\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs26 \cf2 \cb4 $ ls -l\
total 12\
drwxrwxr-x 2 saml saml 4096 Nov 16 09:48 dir1\
drwxrwxr-x 2 saml saml 4096 Nov 16 09:48 dir2\
drwxrwxr-x 2 saml saml 4096 Nov 16 09:48 dir3\
-rw-rw-r-- 1 saml saml    0 Nov 16 09:49 fileA\
-rw-rw-r-- 1 saml saml    0 Nov 16 09:49 fileB\
-rw-rw-r-- 1 saml saml    0 Nov 16 09:49 fileC\

\f0\fs30 \cb3 Then we can use 
\f1\fs26 \cb4 grep
\f0\fs30 \cb3  to filter out directories or not-directories like so:\cb1 \

\f1\fs26 \cb4 # directories\
$ ls -l | grep "^d"\
drwxrwxr-x 2 saml saml 4096 Nov 16 09:48 dir1\
drwxrwxr-x 2 saml saml 4096 Nov 16 09:48 dir2\
drwxrwxr-x 2 saml saml 4096 Nov 16 09:48 dir3\
\
# regular files\
$ ls -l | grep "^-"\
-rw-rw-r-- 1 saml saml    0 Nov 16 09:49 fileA\
-rw-rw-r-- 1 saml saml    0 Nov 16 09:49 fileB\
-rw-rw-r-- 1 saml saml    0 Nov 16 09:49 fileC\

\f0\fs30 \cb3 Now just use 
\f1\fs26 \cb4 wc -l
\f0\fs30 \cb3  again to count the above:\cb1 \

\f1\fs26 \cb4 # directories\
$ ls -l | grep "^d" | wc -l\
3\
\
# regular files\
$ ls -l | grep "^-" | wc -l\
3\

\f0\fs30 \cb3 Though, you can avoid 
\f1\fs26 \cb4 wc
\f0\fs30 \cb3  altogether, and use 
\f1\fs26 \cb4 grep
\f0\fs30 \cb3 's 
\f1\fs26 \cb4 -c
\f0\fs30 \cb3  option:\cb1 \

\f1\fs26 \cb4 $ ls -l | grep -c '^d'\

\f0\fs30 \cb3 (again, hidden files are not included. Note that directories and regular are two types of files. There are many more like named pipes, symbolic links, devices, sockets...).\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\b\fs34 \cf2 \cb3 Recursion\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b0\fs30 \cf2 \cb3 If you need to find the files and directories recursively under 
\f1\fs26 \cb4 /usr/bin
\f0\fs30 \cb3  then you'll likely want to change tactics entirely and make use of another tool called 
\f1\fs26 \cb4 find
\f0\fs30 \cb3 .\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\b\fs34 \cf2 \cb3 Example\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs26 \cf2 \cb4 $ find /usr/bin | wc -l\
4632\

\f0\fs30 \cb3 (though above 
\f1\fs26 \cb4 /usr/bin
\f0\fs30 \cb3  itself is included in the count)\cb1 \
\cb3 The same techniques I used above could be employed use 
\f1\fs26 \cb4 ls
\f0\fs30 \cb3  to do something similar but 
\f1\fs26 \cb4 ls
\f0\fs30 \cb3  is generally not a good tool to parse the output. 
\f1\fs26 \cb4 find
\f0\fs30 \cb3  on the other hand was built for this, and offers switches to find either files or directories.\cb1 \

\f1\fs26 \cb4 # find files\
$ find /usr/bin -type f\
\
# find directories\
$ find /usr/bin -type d\

\f0\fs30 \cb3 (note that this time, 
\f1\fs26 \cb4 find
\f0\fs30 \cb3  is including hidden files (except 
\f1\fs26 \cb4 .
\f0\fs30 \cb3  and 
\f1\fs26 \cb4 ..
\f0\fs30 \cb3 )).\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\b\fs34 \cf2 \cb3 newlines?\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b0\fs30 \cf2 \cb3 I've never figured out why a newline character is a legal character to use when creating file names or directory names. So the methods discussed above using 
\f1\fs26 \cb4 wc
\f0\fs30 \cb3  and 
\f1\fs26 \cb4 ls
\f0\fs30 \cb3  would not contend with these, so use them with that in mind.\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\b\fs34 \cf2 \cb3 Example\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b0\fs30 \cf2 \cb3 Create a directory & file name with newlines.\cb1 \

\f1\fs26 \cb4 $ mkdir $'dir4\\n5'\
$ touch $'fileD\\nE'\
ls
\f0\fs30 \cb3  shows them correctly:\cb1 \

\f1\fs26 \cb4 $ ls -1\
dir1\
dir2\
dir3\
dir4?5\
fileA\
fileB\
fileC\
fileD?E\

\f0\fs30 \cb3 But 
\f1\fs26 \cb4 wc
\f0\fs30 \cb3  counts the directories and files that contain newlines as 2 items, not one.\cb1 \

\f1\fs26 \cb4 $ ls -1 | wc -l\
10\

\f0\fs30 \cb3 One method to get around this, if using the GNU implementation of 
\f1\fs26 \cb4 find
\f0\fs30 \cb3  is to make use of 
\f1\fs26 \cb4 find
\f0\fs30 \cb3 's ability to print something else in place of each file that it finds and then count those instead.\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\b\fs34 \cf2 \cb3 Example\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs26 \cf2 \cb4 $ find . -printf . | wc -c\
9\

\f0\fs30 \cb3 Here we're finding everything in the current directory (except 
\f1\fs26 \cb4 ..
\f0\fs30 \cb3 ), and printing a dot (
\f1\fs26 \cb4 .
\f0\fs30 \cb3 ) for each, and then counting the dots using 
\f1\fs26 \cb4 wc
\f0\fs30 \cb3 's ability to count bytes instead of lines, 
\f1\fs26 \cb4 wc -c
\f0\fs30 \cb3 .\cb1 \
}